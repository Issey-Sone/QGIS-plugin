# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Foo
                                 A QGIS plugin
 Foo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Issey Sone
        email                : issey.sone@mail.utoronto.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.core import QgsProject, QgsVectorLayer
# from qgis.PyQt.QtCore import QObject, QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction, QMessageBo

# Initialize Qt resources from file resources.py
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from .resources import *
from qgis.core import QgsVectorLayer, QgsProject

from PyQt5.QtWidgets import QAction, QMessageBox
from PyQt5.QtGui import QIcon

class Foo:
    """QGIS Plugin Implementation."""
    
    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface

    def initGui(self):
        # Create action that will start plugin configuration
        self.action = QAction(QIcon(":/plugins/foo/icon.png"),
                              "Foo plugin",
                              self.iface.mainWindow())
        self.action.setObjectName("testAction")
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is status tip")
        self.action.triggered.connect(self.run)
        self.action.triggered.connect(self.show_message)

        # Add toolbar button and menu item
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Test plugins", self.action)

        # Connect to signal renderComplete which is emitted when canvas
        # rendering is done
        self.iface.mapCanvas().renderComplete.connect(self.renderTest)

        # Connect to current active layer (for testing purposes)
        self.iface.currentLayerChanged.connect(self.layerChanged)

    def show_message(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("This is a pop-up message!")
        msg.setWindowTitle("Message")  # Corrected typo
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def unload(self):
        # Remove the plugin menu item and icon
        self.iface.removePluginMenu("&Test plugins", self.action)
        self.iface.removeToolBarIcon(self.action)

        # Disconnect from the canvas signal if connected
        try:
            self.iface.mapCanvas().renderComplete.disconnect(self.renderTest)
        except TypeError:
            # The signal was not connected, or already disconnected
            pass

        # Disconnect from the current layer change signal if connected
        try:
            self.iface.currentLayerChanged.disconnect(self.layerChanged)
        except TypeError:
            # The signal was not connected, or already disconnected
            pass

        # Disconnect from the layer's beforeCommitChanges signal if connected
        if self.layer:
            try:
                self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)
            except TypeError:
                # The signal was not connected, or already disconnected
                pass



    def run(self):
        # Create and show a configuration dialog or something similar
        print("TestPlugin: run called!")

    def renderTest(self, painter):
        # Use painter for drawing to map canvas
        print("TestPlugin: renderTest called!")
    

    def layerChanged(self, layer):
        # Disconnect from the previous layer's signals if any
        if self.layer:
            self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)

        self.layer = layer

        if isinstance(self.layer, QgsVectorLayer):
            self.layer.beforeCommitChanges.connect(self.beforeCommitChanges)
            print(f"Connected to layer: {self.layer.name()}")

    def beforeCommitChanges(self):
        if not isinstance(self.layer, QgsVectorLayer):
            return

        edit_buffer = self.layer.editBuffer()
        if edit_buffer:
            deleted_features = edit_buffer.deletedFeatureIds()
            # Note: 'deletedAttributeIds' is not a valid method; instead, you can track attribute changes separately.
            
            print(f"Number of deleted features: {len(deleted_features)}")
            # Example: Iterate through and log the deleted feature IDs
            for fid in deleted_features:
                print(f"Deleted feature ID: {fid}")

        # Additional logic to handle other cases can be added here