# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Foo
                                 A QGIS plugin
 Foo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Issey Sone
        email                : issey.sone@mail.utoronto.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.core import QgsProject, QgsVectorLayer
# from qgis.PyQt.QtCore import QObject, QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction, QMessageBo

# Initialize Qt resources from file resources.py
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from .resources import *

from PyQt5.QtWidgets import QAction
from PyQt5.QtGui import QIcon
from qgis.core import QgsVectorLayer

class Foo:
    """QGIS Plugin Implementation."""
    
    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        self.layer = self.iface.mapCanvas().currentLayer()  # Initialize layer to current layer in map canvas

    def initGui(self):
        # Create action that will start plugin configuration
        self.action = QAction(
            QIcon("testplug:icon.png"),
            "Foo plugin",
            self.iface.mainWindow()
        )
        self.action.triggered.connect(self.run)

        # Add toolbar button and menu item
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Test plugins", self.action)

        # Connect to current active layer in the map canvas (for testing purposes)
        self.iface.mapCanvas().currentLayerChanged.connect(self.layerChanged)

        # If there's a current layer and it's editable, connect the beforeCommitChanges signal
        if self.layer and isinstance(self.layer, QgsVectorLayer) and self.layer.isEditable():
            self.layer.beforeCommitChanges.connect(self.beforeCommitChanges)
            print(f"Connected to layer: {self.layer.name()}")

    def unload(self):
        # Remove the plugin menu item and icon
        self.iface.removePluginMenu("&Test plugins", self.action)
        self.iface.removeToolBarIcon(self.action)

        # Disconnect from current layer change signal
        try:
            self.iface.mapCanvas().currentLayerChanged.disconnect(self.layerChanged)
        except TypeError:
            pass

        if self.layer:
            try:
                self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)
            except TypeError:
                pass

    def run(self):
        print(self.layer == None)

    def layerChanged(self, layer):
        # Disconnect from the previous layer's signals if any
        if self.layer:
            try:
                self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)
            except TypeError:
                pass

        self.layer = layer

        if isinstance(self.layer, QgsVectorLayer):
            if self.layer.isEditable():
                self.layer.beforeCommitChanges.connect(self.beforeCommitChanges)
                print(f"Connected to layer: {self.layer.name()}")

    def beforeCommitChanges(self):
        print("beforeCommitChanges signal triggered.")

        # Get the current layer in the map canvas
        active_layer = self.iface.mapCanvas().currentLayer()

        if not isinstance(active_layer, QgsVectorLayer):
            print("Active layer is not a vector layer.")
            return

        if active_layer.id() != self.layer.id():
            print("Active layer and editing layer do not match.")
            return

        if not self.layer.isEditable():
            print("The layer is not currently editable.")
            return

        edit_buffer = self.layer.editBuffer()
        if edit_buffer:
            # Count deleted features
            deleted_features = edit_buffer.deletedFeatureIds()
            num_deleted_features = len(deleted_features)
            print(f"Number of deleted features: {num_deleted_features}")

            # Analyze attribute changes
            changed_attributes = edit_buffer.changedAttributeValues()
            num_deleted_attributes = sum(
                1 for attrs in changed_attributes.values() if any(v is None for v in attrs.values())
            )
            print(f"Number of deleted attributes: {num_deleted_attributes}")
