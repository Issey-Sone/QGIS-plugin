# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Foo
                                 A QGIS plugin
 Foo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Issey Sone
        email                : issey.sone@mail.utoronto.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.core import QgsProject, QgsVectorLayer
# from qgis.PyQt.QtCore import QObject, QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction, QMessageBo

# Initialize Qt resources from file resources.py
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from .resources import *
# Import the code for the dialog
from .foo_dialog import FooDialog
import os.path


class Foo():
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
    # save reference to the QGIS interface
        self.iface = iface

    def initGui(self):
    # create action that will start plugin configuration
        self.action = QAction(QIcon("testplug:icon.png"),
                            "Foo plugin",
                            self.iface.mainWindow())
        self.action.setObjectName("testAction")
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is status tip")
        self.action.triggered.connect(self.run)

        # add toolbar button and menu item
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Test plugins", self.action)

        # connect to signal renderComplete which is emitted when canvas
        # rendering is done
        self.iface.mapCanvas().renderComplete.connect(self.renderTest)

    def unload(self):
        print("SOMETHING HERE")
        # remove the plugin menu item and icon
        self.iface.removePluginMenu("&Test plugins", self.action)
        self.iface.removeToolBarIcon(self.action)

        # disconnect form signal of the canvas
        self.iface.mapCanvas().renderComplete.disconnect(self.renderTest)


    def run(self):
        # create and show a configuration dialog or something similar
        print("TestPlugin: run called!")

    def renderTest(self, painter):
        # use painter for drawing to map canvas
        print("TestPlugin: renderTest called!")
    # def __init__(self, iface):
    #     """Constructor.

    #     :param iface: An interface instance that will be passed to this class
    #         which provides the hook by which you can manipulate the QGIS
    #         application at run time.
    #     :type iface: QgsInterface
    #     """
    #     super().__init__()
    #     self.iface = iface
    #     self.action = None
    #     self.layers = []
    #     self.settings = QSettings()
    #     self.translator = QTranslator()

    #     # # Save reference to the QGIS interface
    #     # self.iface = iface
    #     # # initialize plugin directory
    #     # self.plugin_dir = os.path.dirname(__file__)
    #     # # initialize locale
    #     # locale = QSettings().value('locale/userLocale')[0:2]
    #     # locale_path = os.path.join(
    #     #     self.plugin_dir,
    #     #     'i18n',
    #     #     'Foo_{}.qm'.format(locale))

    #     # if os.path.exists(locale_path):
    #     #     self.translator = QTranslator()
    #     #     self.translator.load(locale_path)
    #     #     QCoreApplication.installTranslator(self.translator)

    #     # # Declare instance attributes
    #     # self.actions = []
    #     # self.menu = self.tr(u'&Foo')

    #     # # Check if plugin was started the first time in current QGIS session
    #     # # Must be set in initGui() to survive plugin reloads
    #     # self.first_start = None
    # def initGui(self):
    #     self.initialize_locale()
    #     self.action.triggered.connect(self.toggle_feature_edit_warning)
    
    # def unload(self):
    #     self.iface.removePluginMenu()



    # # noinspection PyMethodMayBeStatic
    # def tr(self, message):
    #     """Get the translation for a string using Qt translation API.

    #     We implement this ourselves since we do not inherit QObject.

    #     :param message: String for translation.
    #     :type message: str, QString

    #     :returns: Translated version of message.
    #     :rtype: QString
    #     """
    #     # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
    #     return QCoreApplication.translate('Foo', message)


    # def add_action(
    #     self,
    #     icon_path,
    #     text,
    #     callback,
    #     enabled_flag=True,
    #     add_to_menu=True,
    #     add_to_toolbar=True,
    #     status_tip=None,
    #     whats_this=None,
    #     parent=None):
    #     """Add a toolbar icon to the toolbar.

    #     :param icon_path: Path to the icon for this action. Can be a resource
    #         path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
    #     :type icon_path: str

    #     :param text: Text that should be shown in menu items for this action.
    #     :type text: str

    #     :param callback: Function to be called when the action is triggered.
    #     :type callback: function

    #     :param enabled_flag: A flag indicating if the action should be enabled
    #         by default. Defaults to True.
    #     :type enabled_flag: bool

    #     :param add_to_menu: Flag indicating whether the action should also
    #         be added to the menu. Defaults to True.
    #     :type add_to_menu: bool

    #     :param add_to_toolbar: Flag indicating whether the action should also
    #         be added to the toolbar. Defaults to True.
    #     :type add_to_toolbar: bool

    #     :param status_tip: Optional text to show in a popup when mouse pointer
    #         hovers over the action.
    #     :type status_tip: str

    #     :param parent: Parent widget for the new action. Defaults None.
    #     :type parent: QWidget

    #     :param whats_this: Optional text to show in the status bar when the
    #         mouse pointer hovers over the action.

    #     :returns: The action that was created. Note that the action is also
    #         added to self.actions list.
    #     :rtype: QAction
    #     """

    #     icon = QIcon(icon_path)
    #     action = QAction(icon, text, parent)
    #     action.triggered.connect(callback)
    #     action.setEnabled(enabled_flag)

    #     if status_tip is not None:
    #         action.setStatusTip(status_tip)

    #     if whats_this is not None:
    #         action.setWhatsThis(whats_this)

    #     if add_to_toolbar:
    #         # Adds plugin icon to Plugins toolbar
    #         self.iface.addToolBarIcon(action)

    #     if add_to_menu:
    #         self.iface.addPluginToMenu(
    #             self.menu,
    #             action)

    #     self.actions.append(action)

    #     return action

    # def initGui(self):
    #     """Create the menu entries and toolbar icons inside the QGIS GUI."""

    #     icon_path = ':/plugins/foo/icon.png'
    #     self.add_action(
    #         icon_path,
    #         text=self.tr(u''),
    #         callback=self.run,
    #         parent=self.iface.mainWindow())

    #     # will be set False in run()
    #     self.first_start = True


    # def unload(self):
    #     """Removes the plugin menu item and icon from QGIS GUI."""
    #     for action in self.actions:
    #         self.iface.removePluginMenu(
    #             self.tr(u'&Foo'),
    #             action)
    #         self.iface.removeToolBarIcon(action)


    # def run(self):
    #     """Run method that performs all the real work"""

    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.first_start == True:
    #         self.first_start = False
    #         self.dlg = FooDialog()

    #     # show the dialog
    #     self.dlg.show()
    #     # Run the dialog event loop
    #     result = self.dlg.exec_()
    #     # See if OK was pressed
    #     if result:
    #         # Do something useful here - delete the line containing pass and
    #         # substitute with your code.
    #         pass
