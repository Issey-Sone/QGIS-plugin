# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Foo
                                 A QGIS plugin
 Foo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Issey Sone
        email                : issey.sone@mail.utoronto.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.core import QgsProject, QgsVectorLayer
# from qgis.PyQt.QtCore import QObject, QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction, QMessageBo

# Initialize Qt resources from file resources.py
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from .resources import *

from PyQt5.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog, QVBoxLayout, QLabel, QSlider, QPushButton, QMessageBox
from qgis.PyQt.QtCore import Qt
from qgis.core import QgsVectorLayer

class Foo:
    """QGIS Plugin Implementation."""
    
    def __init__(self, iface):
        self.iface = iface
        self.layer = self.iface.mapCanvas().currentLayer()
        self.threshold = 10  # Default threshold

    def initGui(self):
        self.action = QAction(QIcon(":plugins/foo/sos_24.png"), "Foo plugin", self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Test plugins", self.action)

        self.iface.mapCanvas().currentLayerChanged.connect(self.layerChanged)

        if self.layer and isinstance(self.layer, QgsVectorLayer) and self.layer.isEditable():
            self.layer.beforeCommitChanges.connect(self.beforeCommitChanges)
            print(f"Connected to layer: {self.layer.name()}")
            self.printFeatureCount()

    def unload(self):
        self.iface.removePluginMenu("&Test plugins", self.action)
        self.iface.removeToolBarIcon(self.action)

        try:
            self.iface.mapCanvas().currentLayerChanged.disconnect(self.layerChanged)
        except TypeError:
            pass

        if self.layer:
            try:
                self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)
            except TypeError:
                pass

    def run(self):
        self.showSettingsDialog()

    def layerChanged(self, layer):
        if self.layer:
            try:
                self.layer.beforeCommitChanges.disconnect(self.beforeCommitChanges)
            except TypeError:
                pass

        self.layer = layer

        if isinstance(self.layer, QgsVectorLayer):
            self.layer.beforeCommitChanges.connect(self.beforeCommitChanges)
            print(f"Connected to layer: {self.layer.name()}")
            self.printFeatureCount()

    def beforeCommitChanges(self):
        print("beforeCommitChanges signal triggered.")

        if not isinstance(self.layer, QgsVectorLayer):
            print("Layer is not a vector layer.")
            return

        if not self.layer.isEditable():
            print("The layer is not currently editable.")
            return

        edit_buffer = self.layer.editBuffer()
        if edit_buffer:
            deleted_features = edit_buffer.deletedFeatureIds()
            num_deleted_features = len(deleted_features)
            print(f"Number of deleted features: {num_deleted_features}")

            changed_attributes = edit_buffer.changedAttributeValues()
            num_deleted_attributes = sum(
                1 for attrs in changed_attributes.values() if any(v is None for v in attrs.values())
            )
            print(f"Number of deleted attributes: {num_deleted_attributes}")

            if num_deleted_features > self.threshold:
                response = QMessageBox.warning(
                    None,
                    "Warning",
                    f"Too many features are being deleted ({num_deleted_features}). "
                    f"Threshold is {self.threshold}. Do you want to continue?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )
                
                if response == QMessageBox.No:
                    print("User canceled the commit.")
                    edit_buffer.rollBack()
                    return

        print("Commit will proceed.")

    def printFeatureCount(self):
        if self.layer:
            feature_count = self.layer.featureCount()
            print(f"The layer '{self.layer.name()}' has {feature_count} features.")

    def showSettingsDialog(self):
        # Create a dialog window for settings
        dialog = QDialog()
        dialog.setWindowTitle("Settings")
        
        layout = QVBoxLayout()

        label = QLabel(f"Set threshold for deleted features: {self.threshold}")
        layout.addWidget(label)

        slider = QSlider(Qt.Horizontal)
        slider.setMinimum(1)
        slider.setMaximum(100)
        slider.setValue(self.threshold)
        slider.setTickPosition(QSlider.TicksBelow)
        slider.setTickInterval(10)
        layout.addWidget(slider)

        apply_button = QPushButton("Apply")
        layout.addWidget(apply_button)

        dialog.setLayout(layout)

        # Update the label as the slider moves
        slider.valueChanged.connect(lambda: label.setText(f"Set threshold for deleted features: {slider.value()}"))

        # Apply the new threshold value when the button is clicked
        apply_button.clicked.connect(lambda: self.setThreshold(slider.value(), dialog))

        dialog.exec_()

    def setThreshold(self, value, dialog):
        self.threshold = value
        print(f"Threshold set to: {self.threshold}")
        dialog.accept()
